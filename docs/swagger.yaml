definitions:
  model.ResponseError:
    properties:
      error:
        $ref: '#/definitions/model.ResponseErrorField'
      success:
        default: false
        type: boolean
    type: object
  model.ResponseErrorField:
    properties:
      code:
        type: string
      description:
        type: string
    type: object
  model.ResponseSuccess:
    properties:
      data: {}
      success:
        default: true
        type: boolean
    type: object
  requests.createCreativeSpaceRequestCoordinate:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  requests.createCreativeSpaceRequestData:
    properties:
      coordinate:
        $ref: '#/definitions/requests.createCreativeSpaceRequestCoordinate'
      description:
        type: string
      metroStations:
        items:
          $ref: '#/definitions/requests.createCreativeSpaceRequestMetroStation'
        type: array
      photos:
        items:
          type: string
        type: array
      pricePerHour:
        type: integer
      workingHours:
        $ref: '#/definitions/requests.createCreativeSpaceRequestWorkingHours'
    required:
    - coordinate
    - description
    - metroStations
    - photos
    - pricePerHour
    - workingHours
    type: object
  requests.createCreativeSpaceRequestMetroStation:
    properties:
      distanceInMinutes:
        type: integer
      id:
        type: integer
    required:
    - distanceInMinutes
    - id
    type: object
  requests.createCreativeSpaceRequestWorkingHours:
    properties:
      endAt:
        type: string
      startAt:
        type: string
    required:
    - endAt
    - startAt
    type: object
  requests.createSessionRequestData:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  requests.createUserRequestData:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  requests.patchUserRequestData:
    properties:
      email:
        type: string
      id:
        type: integer
    type: object
  responses.createCreativeSpaceResponseCreativeSpace:
    properties:
      id:
        type: integer
    type: object
  responses.createCreativeSpaceResponseData:
    properties:
      creativeSpace:
        $ref: '#/definitions/responses.createCreativeSpaceResponseCreativeSpace'
    type: object
  responses.createSessionResponseData:
    properties:
      user:
        $ref: '#/definitions/responses.createSessionResponseUser'
    type: object
  responses.createSessionResponseUser:
    properties:
      email:
        type: string
      id:
        type: integer
    type: object
  responses.createUserResponseData:
    properties:
      user:
        $ref: '#/definitions/responses.createUserResponseUser'
    type: object
  responses.createUserResponseUser:
    properties:
      id:
        type: integer
    type: object
  responses.getMetroStationsResponseData:
    properties:
      metroStations:
        items:
          $ref: '#/definitions/responses.getMetroStationsResponseMetroStation'
        type: array
    type: object
  responses.getMetroStationsResponseMetroStation:
    properties:
      color:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  responses.getUserResponseData:
    properties:
      user:
        $ref: '#/definitions/responses.getUserResponseUser'
    type: object
  responses.getUserResponseUser:
    properties:
      email:
        type: string
      id:
        type: integer
    type: object
  responses.getUsersResponseData:
    properties:
      users:
        items:
          $ref: '#/definitions/responses.getUsersResponseUser'
        type: array
    type: object
  responses.getUsersResponseUser:
    properties:
      email:
        type: string
      id:
        type: integer
    type: object
  responses.patchUserResponseData:
    properties:
      user:
        $ref: '#/definitions/responses.patchUserResponseUser'
    type: object
  responses.patchUserResponseUser:
    properties:
      id:
        type: integer
    type: object
host: localhost:8080.
info:
  contact: {}
  title: Starter API
paths:
  /api/v1/creative-space:
    post:
      consumes:
      - application/json
      parameters:
      - description: Параметры запроса
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.createCreativeSpaceRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/responses.createCreativeSpaceResponseData'
              type: object
        "403":
          description: 'Коды ошибок: [1100]'
          schema:
            $ref: '#/definitions/model.ResponseError'
      summary: Создание креативной площадки
  /api/v1/health:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseSuccess'
      summary: Проверка работоспособности сервера
  /api/v1/metro-stations:
    get:
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/responses.getMetroStationsResponseData'
              type: object
        "403":
          description: 'Коды ошибок: [1100]'
          schema:
            $ref: '#/definitions/model.ResponseError'
      summary: Возвращает полный список станций метро
  /api/v1/session:
    delete:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseSuccess'
        "403":
          description: 'Коды ошибок: [1100]'
          schema:
            $ref: '#/definitions/model.ResponseError'
      summary: Удаление сессии
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseSuccess'
        "403":
          description: 'Коды ошибок: [1100]'
          schema:
            $ref: '#/definitions/model.ResponseError'
      summary: Получение сессии
    post:
      consumes:
      - application/json
      parameters:
      - description: Параметры запроса
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.createSessionRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/responses.createSessionResponseData'
              type: object
      summary: Создание сессии пользователя
  /api/v1/user:
    post:
      consumes:
      - application/json
      parameters:
      - description: Параметры запроса
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.createUserRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/responses.createUserResponseData'
              type: object
        "403":
          description: 'Коды ошибок: [1100]'
          schema:
            $ref: '#/definitions/model.ResponseError'
      summary: Создание пользователя
  /api/v1/user/:id:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Id пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseSuccess'
        "403":
          description: 'Коды ошибок: [1100]'
          schema:
            $ref: '#/definitions/model.ResponseError'
      summary: Удаление информации о пользователе
    get:
      parameters:
      - description: Id пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/responses.getUserResponseData'
              type: object
        "403":
          description: 'Коды ошибок: [1100]'
          schema:
            $ref: '#/definitions/model.ResponseError'
      summary: Возвращает информацию о пользователе
    patch:
      consumes:
      - application/json
      parameters:
      - description: Id пользователя
        in: path
        name: id
        required: true
        type: string
      - description: Параметры запроса
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.patchUserRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/responses.patchUserResponseData'
              type: object
        "403":
          description: 'Коды ошибок: [1100]'
          schema:
            $ref: '#/definitions/model.ResponseError'
      summary: Обновление информации о пользователе
  /api/v1/users:
    get:
      consumes:
      - application/json
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/responses.getUsersResponseData'
              type: object
        "403":
          description: 'Коды ошибок: [1100]'
          schema:
            $ref: '#/definitions/model.ResponseError'
      summary: Возвращает список пользователей
swagger: "2.0"
